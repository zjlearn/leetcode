
import java.lang.reflect.Array;
import java.util.*;


/*
 * 103. Binary Tree Zigzag Level Order Traversal
 * 给定一个树，给出zigzag形式的遍历
 * 方法： 使用两个栈，来分别保存每层的节点按照左，右孩子存储， 右左孩子存储
 * 方法2： 线层次遍历， 然后对相应的进行反转
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null) return result;
        LinkedList<TreeNode> queue= new LinkedList<TreeNode>();
        queue.add(root);
        queue.add(null);
        ArrayList<Integer> level= new ArrayList<Integer>();
        while(!queue.isEmpty()){
        	TreeNode node = queue.poll();
        	if(node==null){
        		if(!queue.isEmpty())
        			queue.add(null);
    			result.add(level);

    			level= new ArrayList<Integer>();

        		continue;
        	}else{  //node not null
        		level.add(node.val);
        		if(node.left!=null)
        			queue.offer(node.left);
        		if(node.right!=null)
        			queue.offer(node.right);
        	}
        }
        //reverse the list
        int interval=1;
        for(List<Integer> s: result){
        	if(interval%2==0)
        		Collections.reverse(s);
        	interval++;
        }
        return result;
        
    }
    public static void main(String[] args) {
		Integer[] values = new Integer[]{3,9,20,null,null,15,7};
		TreeNode root = TreeFactory.newTree(values);
		List<List<Integer>> result= new Solution().zigzagLevelOrder(root);
		System.out.println(result.toString());
	}
}
}