
import java.util.PriorityQueue;

/*
 * Super Ugly Number
 * 计算超级丑数
 * Write a program to find the nth super ugly number.
 * 限制：0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
 * 方法：迭代法， 
 * 使用数组保存对于每个质数乘积的下标，index[], i* primes[j]取得的质数最小时， index[j]++;
 * 因为堆数据结构不提供查询操作， 所以如果用到堆，只能另外建立一个数据结构，封装值， 和其对应的数组的下标,以及素数
 * 
 */
public class Solution {
	private class Item implements Comparable<Item>{
		public  int val;  //保存值， 
		public  int index; //保存是由Primes中哪一个质数乘积而来的
		int prime;
		public Item(int index, int val, int prime ){
			this.val=val;
			this.index=index;
			this.prime=prime;
		}
		@Override
		public int compareTo(Item o) {
			// TODO Auto-generated method stub
			if(this.val < o.val)
				return -1;
			else if( this.val > o.val)
				return 1;
			else
				return 0;
		}
	}
    public int nthSuperUglyNumber(int n, int[] primes) {
        PriorityQueue<Item> heap = new PriorityQueue<Item>();
        int [] result= new int[n];
        result[0]=1;
        for (int i = 0; i < primes.length; i++)  
            heap.add(new Item(0, primes[i], primes[i]));
        for(int i=1; i<n; i++){
        	Item cur =heap.peek();
        	result[i]=cur.val;
        	do{
        		cur=heap.poll();
        		cur.val=result[++cur.index]* cur.prime;
        		heap.add(cur);
        	}while( !heap.isEmpty() && heap.peek().val ==result[i]);
        }
        return result[n-1];
    }
    public static void main(String[] args) {
		int [] primes = new int []{3,5,7,11,19,23,29,41,43,47};
		int n=15;
		System.out.println(new Solution().nthSuperUglyNumber(n, primes));
	}
}