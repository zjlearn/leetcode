package leetcode;
/*
 * 60. Permutation Sequence
 * Given n and k, return the kth permutation sequence.
 * 规律为：
 * 		先 确定第一位（最高位）
 * 		然后再确定次高位
 */
public class Solution {
	private int calFactorial(int n){  
        int ans=1;  
        for(int i=1;i<=n;i++){  
            ans*=i;  
        }  
          
        return ans;  
    } 
    public String getPermutation(int n, int k) {
    	StringBuilder ans=new StringBuilder("");  
        int num=k;  
        StringBuilder s=new StringBuilder("");  
        int factorial=calFactorial(n);  
          
        for(int i=1;i<=n;i++){  
            s.append(i);  
        }
        
        for(int i=n;i>=1;i--){  
            factorial/=i;  
            int index=(num-1)/factorial;  
              
            String tmp=""+s.charAt(index);  
            ans.append(tmp);  
            num-=index*factorial;  
            s=s.deleteCharAt(index);  
        }
        return ans.toString();
    }
    public static void main(String[] args) {
		
	}
}