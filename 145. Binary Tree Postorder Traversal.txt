import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;



/*
 * * 返回二叉树的后序遍历
 * 限制： 采用非递归的方式进行实现
 * 方法： 因为二叉树的后序遍历方式采用的是 左-右-中
 * 递归的方式 改为非递归的方式时， 一般采用栈来保存信息。 因为函数的递归本身就是通过栈的方式来实现的。

 * 只要注意在函数递归的过程中， 会将剩余的什么信息保存到栈中， 然后使用相同的方式来保存这个信息到栈中去即可。
 * 
 */
public class Solution {
	class Node{
		public TreeNode x;
		public boolean firstVisited;
		public Node(TreeNode x){this.x=x; firstVisited =true; }
	}
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root == null)
        	return result;
        LinkedList<Node> stack=new LinkedList<Node>();
        Node head=new Node(root); 
        Node p=null;
        TreeNode temp=root;
        while(temp.left != null){  //
    		stack.push(new Node(temp));
    		temp=temp.left;
    	}
        stack.push(new Node(temp));
        
        while( !stack.isEmpty()){  //
        	p=stack.peek();
        	temp=p.x;
        	if( !p.firstVisited ){
        		result.add(p.x.val);
        		stack.pop();
        		continue;
        	}else{
        		p.firstVisited=false;
        		temp=p.x.right;   //temp may be null
        		if(temp == null)
        			continue;
        	}
        	while(temp.left != null){  //
        		stack.push(new Node(temp));
        		temp=temp.left;
        	}
        	stack.push(new Node(temp));
        }
        return result;
    }
    public static void main(String[] args) {
		TreeNode root= new TreeNode(1);
		TreeNode node1= new TreeNode(2);
		TreeNode node2= new TreeNode(3);
		root.right=node1;
		node1.left=node2;
		List<Integer> result= new Solution().postorderTraversal(null);
		System.out.println(result.toString());
		
	}
}