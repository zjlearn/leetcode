
import java.util.LinkedList;

/*
 * 222. Count Complete Tree Nodes
 * Given a complete binary tree, count the number of nodes.
 * 方法：使用广度优先对树进行遍历， 然后对树节点的个数进行计数。
 * 但是上面的时间会超时
 * ================================
 * 方法： 先判断节点是否是满二叉树 ， 如果是直接返回节点数量，如果不是则递归求解。
 */

public class Solution {
    public int countNodes_one(TreeNode root) {
    	LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
    	if(root==null) return 0;
    	queue.offer(root);
    	int sum=0;
    	while(!queue.isEmpty()){
    		TreeNode temp = queue.remove();
    		sum++;
    		if(temp.left!=null)
    			queue.offer(temp.left);
    		if(temp.right!=null)
    			queue.offer(temp.right);
    	}
    	return sum;
    }
    public int countNodes(TreeNode root) {
    	if(root ==null) return 0;
    	int lh=getLeftHight(root);
    	int rh= getRightHight(root);
    	if(lh==rh)
    		return (2<<lh )-1;
    	else
    		return countNodes(root.left)+countNodes(root.right)+1;
    }
    private int getLeftHight(TreeNode root){
    	if(root==null ) return 0;
    	int count=0;
    	while(root.left !=null){
    		root=root.left;
    		count++;
    	}
    	return count;
    }
    private int getRightHight(TreeNode root){
    	if(root==null) return 0;
    	int count=0;
    	while(root.right != null){
    		root=root.right;
    		count++;
    	}
    	return count;
    }
    
    public static void main(String[] args) {
    
	}
}