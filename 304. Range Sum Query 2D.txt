

import java.util.Arrays;

/*
 * Range Sum Query 2D - Immutable 
 * 计算左右角构成的矩形的和
 * 思想：动态规划
 * dp[i][j]代表(0,0)到(i,j)矩形内的和
 */
public class NumMatrix {
	private int [][] dp;
    public NumMatrix(int[][] matrix) {
    	if(matrix.length ==0 )
    		return ;
        dp = new int [matrix.length][matrix[0].length];
        //计算dp
        dp[0][0]=matrix[0][0];
        for(int i=1; i< matrix[0].length ;i++)
        	dp[0][i]=dp[0][i-1]+matrix[0][i];
        for(int j=1; j< matrix.length ; j++)
        	dp[j][0]= dp[j-1][0] + matrix[j][0];
        for(int i=1; i<matrix.length; i++)
        	for(int j=1; j< matrix[0].length; j++){
        		dp[i][j]=matrix[i][j]+dp[i-1][j]+dp[i][j-1] -dp[i-1][j-1];
        	}
        System.out.println(Arrays.deepToString(dp));
    }
    private int dp(int i, int j){
    	if(i<0 || j<0 )
    		return 0;
    	else
    		return dp[i][j];
    }
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return dp(row2,col2)-dp(row2,col1-1)-dp(row1-1,col2) + dp(row1-1,col1-1);
    }
    public static void main(String[] args) {
		/*int [][] matrix=new int[][] {
				{3, 0, 1, 4, 2},
				{5, 6, 3, 2, 1},
				{1, 2, 0, 1, 5},
				{4, 1, 0, 1, 7},
				{1, 0, 3, 0, 5}		
		};
		*/
    	int [][] matrix = null;
		NumMatrix t = new NumMatrix(matrix);
		System.out.println(t.sumRegion(1, 1, 2, 2));
		
	}
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);