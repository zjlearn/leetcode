
/*
 * Longest Increasing Subsequence
 * Given an unsorted array of integers, 
 * find the length of longest increasing subsequence.
 * 给定一个无序数组， 返回最长的增序序列的长度
 * 方法： 典型的动态规划问题。
 * dp[i]记录以i结尾的最长子序列的长度
 * 所以dp[j]={ max(dp[i]+1, )  for i<j && nums[i]< nums[j]
 * }
 */
public class Solution {
    public int lengthOfLIS(int[] nums) {
        int [] dp =new int [nums.length];
        if(nums.length==0)
        	return 0;
        int longestIncrSub=1;
        dp[0]=1; //初始化
        for(int i =1; i<nums.length; i++){
        	int preIncrLen=0;  //前面序列中最长递增序列的长度
        	for(int j=0; j< i; j++){
        		if(dp[j]>preIncrLen && nums[j]< nums[i])
        			preIncrLen=dp[j];
        	}
        	dp[i]=preIncrLen+1;
        	if(dp[i] > longestIncrSub)
        		longestIncrSub=dp[i];
        }
        return longestIncrSub;
    }
    public static void main(String[] args) {
		Solution s= new Solution();
		int [] nums= new int []{};
		int result= s.lengthOfLIS(nums);
		System.out.println(result);
	}
}
